// Code generated by protoc-gen-go.
// source: tester.proto
// DO NOT EDIT!

/*
Package unixgrpc is a generated protocol buffer package.

It is generated from these files:
	tester.proto

It has these top-level messages:
	TestRequest
	TestReply
	DialRequest
	DialReply
	ReadRequest
	ReadReply
	WriteRequest
	WriteReply
	CloseRequest
	CloseReply
*/
package unixgrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TestRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TestReply struct {
	Greeting string `protobuf:"bytes,1,opt,name=greeting" json:"greeting,omitempty"`
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TestReply) GetGreeting() string {
	if m != nil {
		return m.Greeting
	}
	return ""
}

type DialRequest struct {
	Network string `protobuf:"bytes,1,opt,name=network" json:"network,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *DialRequest) Reset()                    { *m = DialRequest{} }
func (m *DialRequest) String() string            { return proto.CompactTextString(m) }
func (*DialRequest) ProtoMessage()               {}
func (*DialRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DialRequest) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *DialRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DialReply struct {
	Sid uint64 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *DialReply) Reset()                    { *m = DialReply{} }
func (m *DialReply) String() string            { return proto.CompactTextString(m) }
func (*DialReply) ProtoMessage()               {}
func (*DialReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *DialReply) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

type ReadRequest struct {
	Sid uint64 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	N   int32  `protobuf:"varint,2,opt,name=n" json:"n,omitempty"`
}

func (m *ReadRequest) Reset()                    { *m = ReadRequest{} }
func (m *ReadRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()               {}
func (*ReadRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRequest) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *ReadRequest) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type ReadReply struct {
	Buf []byte `protobuf:"bytes,1,opt,name=buf,proto3" json:"buf,omitempty"`
}

func (m *ReadReply) Reset()                    { *m = ReadReply{} }
func (m *ReadReply) String() string            { return proto.CompactTextString(m) }
func (*ReadReply) ProtoMessage()               {}
func (*ReadReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadReply) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

type WriteRequest struct {
	Sid uint64 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
	Buf []byte `protobuf:"bytes,2,opt,name=buf,proto3" json:"buf,omitempty"`
}

func (m *WriteRequest) Reset()                    { *m = WriteRequest{} }
func (m *WriteRequest) String() string            { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()               {}
func (*WriteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *WriteRequest) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

func (m *WriteRequest) GetBuf() []byte {
	if m != nil {
		return m.Buf
	}
	return nil
}

type WriteReply struct {
	N int32 `protobuf:"varint,1,opt,name=n" json:"n,omitempty"`
}

func (m *WriteReply) Reset()                    { *m = WriteReply{} }
func (m *WriteReply) String() string            { return proto.CompactTextString(m) }
func (*WriteReply) ProtoMessage()               {}
func (*WriteReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *WriteReply) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type CloseRequest struct {
	Sid uint64 `protobuf:"varint,1,opt,name=sid" json:"sid,omitempty"`
}

func (m *CloseRequest) Reset()                    { *m = CloseRequest{} }
func (m *CloseRequest) String() string            { return proto.CompactTextString(m) }
func (*CloseRequest) ProtoMessage()               {}
func (*CloseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CloseRequest) GetSid() uint64 {
	if m != nil {
		return m.Sid
	}
	return 0
}

type CloseReply struct {
}

func (m *CloseReply) Reset()                    { *m = CloseReply{} }
func (m *CloseReply) String() string            { return proto.CompactTextString(m) }
func (*CloseReply) ProtoMessage()               {}
func (*CloseReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*TestRequest)(nil), "unixgrpc.TestRequest")
	proto.RegisterType((*TestReply)(nil), "unixgrpc.TestReply")
	proto.RegisterType((*DialRequest)(nil), "unixgrpc.DialRequest")
	proto.RegisterType((*DialReply)(nil), "unixgrpc.DialReply")
	proto.RegisterType((*ReadRequest)(nil), "unixgrpc.ReadRequest")
	proto.RegisterType((*ReadReply)(nil), "unixgrpc.ReadReply")
	proto.RegisterType((*WriteRequest)(nil), "unixgrpc.WriteRequest")
	proto.RegisterType((*WriteReply)(nil), "unixgrpc.WriteReply")
	proto.RegisterType((*CloseRequest)(nil), "unixgrpc.CloseRequest")
	proto.RegisterType((*CloseReply)(nil), "unixgrpc.CloseReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Tester service

type TesterClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
	Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialReply, error)
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error)
	Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error)
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error)
}

type testerClient struct {
	cc *grpc.ClientConn
}

func NewTesterClient(cc *grpc.ClientConn) TesterClient {
	return &testerClient{cc}
}

func (c *testerClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/unixgrpc.Tester/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) Dial(ctx context.Context, in *DialRequest, opts ...grpc.CallOption) (*DialReply, error) {
	out := new(DialReply)
	err := grpc.Invoke(ctx, "/unixgrpc.Tester/Dial", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (*ReadReply, error) {
	out := new(ReadReply)
	err := grpc.Invoke(ctx, "/unixgrpc.Tester/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) Write(ctx context.Context, in *WriteRequest, opts ...grpc.CallOption) (*WriteReply, error) {
	out := new(WriteReply)
	err := grpc.Invoke(ctx, "/unixgrpc.Tester/Write", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseReply, error) {
	out := new(CloseReply)
	err := grpc.Invoke(ctx, "/unixgrpc.Tester/Close", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tester service

type TesterServer interface {
	Test(context.Context, *TestRequest) (*TestReply, error)
	Dial(context.Context, *DialRequest) (*DialReply, error)
	Read(context.Context, *ReadRequest) (*ReadReply, error)
	Write(context.Context, *WriteRequest) (*WriteReply, error)
	Close(context.Context, *CloseRequest) (*CloseReply, error)
}

func RegisterTesterServer(s *grpc.Server, srv TesterServer) {
	s.RegisterService(&_Tester_serviceDesc, srv)
}

func _Tester_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixgrpc.Tester/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_Dial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Dial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixgrpc.Tester/Dial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Dial(ctx, req.(*DialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixgrpc.Tester/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Read(ctx, req.(*ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixgrpc.Tester/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Write(ctx, req.(*WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unixgrpc.Tester/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tester_serviceDesc = grpc.ServiceDesc{
	ServiceName: "unixgrpc.Tester",
	HandlerType: (*TesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Tester_Test_Handler,
		},
		{
			MethodName: "Dial",
			Handler:    _Tester_Dial_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Tester_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Tester_Write_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _Tester_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tester.proto",
}

func init() { proto.RegisterFile("tester.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4e, 0xeb, 0x30,
	0x10, 0x85, 0x9b, 0xde, 0xb6, 0xb7, 0x99, 0x78, 0x81, 0xcc, 0x8f, 0xa2, 0x48, 0x48, 0xc5, 0x1b,
	0xd8, 0x90, 0x45, 0x41, 0x62, 0x8d, 0xe0, 0x09, 0xac, 0x4a, 0xac, 0x53, 0x32, 0x44, 0x11, 0xc1,
	0x09, 0xb6, 0x23, 0xc8, 0xbb, 0xf0, 0xb0, 0xc8, 0x8e, 0x93, 0x58, 0x54, 0xdd, 0xcd, 0x64, 0xce,
	0x77, 0x46, 0x3e, 0x13, 0x20, 0x1a, 0x95, 0x46, 0x99, 0x36, 0xb2, 0xd6, 0x35, 0x5d, 0xb7, 0xa2,
	0xfc, 0x2e, 0x64, 0xf3, 0xca, 0xae, 0x20, 0xda, 0xa1, 0xd2, 0x1c, 0x3f, 0x5b, 0x54, 0x9a, 0x52,
	0x58, 0x88, 0xec, 0x03, 0xe3, 0x60, 0x13, 0xdc, 0x84, 0xdc, 0xd6, 0xec, 0x1a, 0xc2, 0x5e, 0xd2,
	0x54, 0x1d, 0x4d, 0x60, 0x5d, 0x48, 0x44, 0x5d, 0x8a, 0xc2, 0x89, 0xc6, 0x9e, 0x3d, 0x42, 0xf4,
	0x5c, 0x66, 0xd5, 0xe0, 0x15, 0xc3, 0x7f, 0x81, 0xfa, 0xab, 0x96, 0xef, 0x4e, 0x39, 0xb4, 0x66,
	0x92, 0xe5, 0xb9, 0x44, 0xa5, 0xe2, 0x79, 0x3f, 0x71, 0x2d, 0xbb, 0x84, 0xb0, 0xb7, 0x30, 0xbb,
	0x4e, 0xe0, 0x9f, 0x2a, 0x73, 0x0b, 0x2f, 0xb8, 0x29, 0xd9, 0x2d, 0x44, 0x1c, 0xb3, 0x7c, 0xd8,
	0x70, 0x20, 0xa0, 0x04, 0x02, 0x61, 0x3d, 0x97, 0x3c, 0x10, 0xc6, 0xad, 0x97, 0x3b, 0xb7, 0x7d,
	0xfb, 0x66, 0xc5, 0x84, 0x9b, 0x92, 0x6d, 0x81, 0xbc, 0xc8, 0x52, 0xe3, 0x71, 0x3b, 0xc7, 0xcc,
	0x27, 0x26, 0x01, 0x70, 0x8c, 0xf1, 0xb4, 0xeb, 0x82, 0x61, 0xdd, 0x06, 0xc8, 0x53, 0x55, 0xab,
	0xe3, 0x7e, 0x8c, 0x00, 0x38, 0x45, 0x53, 0x75, 0xdb, 0x9f, 0x39, 0xac, 0x76, 0xf6, 0x2c, 0xf4,
	0x1e, 0x16, 0xa6, 0xa2, 0xe7, 0xe9, 0x70, 0x99, 0xd4, 0x3b, 0x4b, 0x72, 0xfa, 0xf7, 0x73, 0x53,
	0x75, 0x6c, 0x66, 0x28, 0x93, 0x96, 0x4f, 0x79, 0x07, 0xf0, 0xa9, 0x31, 0xd4, 0x9e, 0x32, 0xa9,
	0xf8, 0x94, 0x17, 0xaa, 0x4f, 0x8d, 0xe1, 0xb1, 0x19, 0x7d, 0x80, 0xa5, 0x7d, 0x38, 0xbd, 0x98,
	0xe6, 0x7e, 0x7a, 0xc9, 0xd9, 0xc1, 0xf7, 0x11, 0xb4, 0x6f, 0xf6, 0x41, 0x3f, 0x26, 0x1f, 0x9c,
	0xc2, 0x61, 0xb3, 0xfd, 0xca, 0xfe, 0xab, 0x77, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x89, 0xa4,
	0x1d, 0xf2, 0xbb, 0x02, 0x00, 0x00,
}
