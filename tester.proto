// Copyright 2015, Google Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

syntax = "proto3";

package unixgrpc;

service Tester {
  rpc Test(TestRequest) returns (TestReply) {}
  rpc Dial(DialRequest) returns (DialReply) {}
  rpc Read(ReadRequest) returns (ReadReply) {}
  rpc Write(WriteRequest) returns (WriteReply) {}
  rpc Close(CloseRequest) returns (CloseReply) {}
}

message TestRequest {
  string name = 1;
}

message TestReply {
  string greeting = 1;
}

message DialRequest {
  string network = 1;
  string address = 2;
}

message DialReply {
  uint64 sid = 1;
}

message ReadRequest {
  uint64 sid = 1;
  int32 n = 2;
}

message ReadReply {
  bytes buf = 1;
}

message WriteRequest {
  uint64 sid = 1;
  bytes buf = 2;
}

message WriteReply {
  int32 n = 1;
}

message CloseRequest {
  uint64 sid = 1;
}

message CloseReply {
  
}